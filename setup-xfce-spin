#!/bin/bash

# set terminal styles
if [ -t 1 ] ; then # are we on terminal?
    # tput available?
    if [ ! "x`which tput 2>/dev/null`" = "x" ] ; then
        # supports colors ?
        ncolors=`tput colors`
        if [ -n "$ncolors" -a  $ncolors -ge 8 ] ; then
            style_bold="`tput bold`"
            style_underline="`tput smul`"
            style_standout="`tput smso`"
            style_normal="`tput sgr0`"
            style_black="`tput setaf 0`"
            style_red="`tput setaf 1`"
            style_green="`tput setaf 2`"
            style_yellow="`tput setaf 3`"
            style_blue="`tput setaf 4`"
            style_magenta="`tput setaf 5`"
            style_cyan="`tput setaf 6`"
            style_white="`tput setaf 7`"
        fi
    fi
fi

CURRUSER=`id -u`
if [ $CURRUSER = "0" ]; then
    echo "${style_red}Do not run this script as root - you will be asked for sudo pawword!${style_normal}"
    exit
fi

# exit when any command fails
set -e

REPO_PATH=`dirname $0`

echo "${style_yellow}Enter sudo password:${style_normal}"
sudo echo


############################################################################
echo "${style_blue}${style_bold}Adjust xfce4-terminal settings.${style_normal}"
mkdir -p ${HOME}/.config/xfce4/terminal
cp "${REPO_PATH}/xfce4-terminal/terminalrc" ${HOME}/.config/xfce4/terminal
echo "Done"
echo

if [ ! -e ${HOME}/.ssh/id_rsa.pub ]; then
    echo "Setup ssh key - ${style_yellow}Answer ssh-keygen's questions:${style_normal}"
    ssh-keygen
    echo
fi

############################################################################
echo "${style_blue}${style_bold}Quieten docker / podman notes.${style_normal}"
sudo touch /etc/containers/nodocker
echo "Done"
echo

############################################################################
echo "${style_blue}${style_bold}Install classic-light schemes (gtksourceview).${style_normal}"
sudo cp "${REPO_PATH}/gtksourceview-classic-light/classic-light.xml" /usr/share/gtksourceview-4/styles/
echo "Done"
echo


############################################################################
echo "${style_blue}${style_bold}Update packages...${style_normal}"
sudo dnf -y update
echo

# see https://code.visualstudio.com/docs/setup/linux
if [ ! -e /etc/yum.repos.d/vscode.repo ]; then
    echo "${style_blue}${style_bold}Prepare VSCode.${style_normal}"
    sudo rpm --import https://packages.microsoft.com/keys/microsoft.asc
    sudo sh -c 'echo -e "[code]\nname=Visual Studio Code\nbaseurl=https://packages.microsoft.com/yumrepos/vscode\nenabled=1\ngpgcheck=1\ngpgkey=https://packages.microsoft.com/keys/microsoft.asc" > /etc/yum.repos.d/vscode.repo'
    echo
fi

############################################################################
# see https://docs.fedoraproject.org/en-US/quick-docs/installing-chromium-or-google-chrome-browsers/
echo "${style_blue}${style_bold}Prepare google chrome.${style_normal}"
sudo dnf -y install fedora-workstation-repositories
sudo dnf -y config-manager --set-enabled google-chrome
echo "Done"
echo


############################################################################
echo "${style_blue}${style_bold}Install dev packages...${style_normal}"
sudo dnf -y install \
    caja \
    pluma \
    gnome-system-monitor \
    xfce4-sensors-plugin \
    xfce4-cpugraph-plugin \
    xfce4-cpufreq-plugin \
    htop \
    avahi-devel \
    avahi-tools \
    gedit \
    libreoffice \
    google-chrome-stable \
    firefox \
    \
    qt-creator \
    valgrind \
    perf \
    podman \
    podman-docker \
    clang-tools-extra \
    cmake git clazy \
    systemd-devel \
    openssl-devel \
    python3-devel python3-numpy \
    xsd xerces-c-devel \
    fftw-devel \
    php-jsonlint python3-jsonschema \
    qt5-linguist qt5-doctools qt5-qtscript \
    qt5-qtlocation-devel \
    qt5-qtcharts-devel \
    qt5-qtdeclarative-devel \
    qt5-qtlocation-devel \
    qt5-qtmultimedia-devel \
    qt5-qtquickcontrols2-devel \
    qt5-qtsensors-devel \
    qt5-qtserialport-devel \
    qt5-qtsvg-devel \
    qt5-qttools-devel \
    qt5-qtvirtualkeyboard-devel \
    qt5-qtwayland-devel \
    qt5-qtwebchannel-devel \
    qt5-qtwebengine-devel \
    qt5-qtwebkit-devel \
    qt5-qtx11extras-devel \
    qt5-qtxmlpatterns-devel \
    qt5-qtconnectivity-devel \
    qt-devel \
    kf5-networkmanager-qt-devel kf5-modemmanager-qt-devel kf5-syntax-highlighting-devel \
    qwt-qt5-devel \
    \
    flatbuffers-devel flatbuffers-compiler protobuf-devel protobuf-compiler \
    jq \
    xz \
    ninja-build \
    npm \
    java \
    xmlstarlet \
    python3-pylint \
    python3-pytest \
    \
    gtest-devel \
    kernel-devel \
    glmark2 \
    plantuml plantumlqeditor \
    dialog \
    ghex \
    kolourpaint \
    krdc \
    kcachegrind \
    cppcheck \
    code \
    snapd \
    wireshark \
    dotnet-sdk-6.0 \
    dotnet-sdk-7.0 \
    nuget \
    nunit
echo

############################################################################
echo "${style_blue}${style_bold}Install vscode c++/cmake extensions.${style_normal}"
code --install-extension ms-vscode.cpptools
code --install-extension ms-vscode.cmake-tools
echo

echo "${style_blue}${style_bold}Install vscode python support.${style_normal}"
code --install-extension ms-python.python
code --install-extension ms-python.vscode-pylance ms-toolsai.jupyter
code --install-extension VisualStudioExptTeam.vscodeintellicode
echo

echo "${style_blue}${style_bold}Install vscode .net/C# related extensions.${style_normal}"
code --install-extension ms-dotnettools.csharp
code --install-extension ms-dotnettools.csdevkit
code --install-extension patcx.vscode-nuget-gallery
code --install-extension jmrog.vscode-nuget-package-manager
code --install-extension EditorConfig.EditorConfig
code --install-extension formulahendry.dotnet-test-explorer
echo

echo "${style_blue}${style_bold}Install vscode useful extensions.${style_normal}"
code --install-extension ms-vscode.hexeditor
code --install-extension ms-azuretools.vscode-docker
code --install-extension bierner.markdown-preview-github-styles
code --install-extension GitHub.vscode-github-actions
code --install-extension  ms-vscode-remote.vscode-remote-extensionpack
code --install-extension formulahendry.auto-rename-tag
code --install-extension formulahendry.auto-close-tag
code --install-extension mohsen1.prettify-json
code --install-extension jebbs.plantuml
echo


############################################################################
echo "${style_blue}${style_bold}Install angular.${style_normal}"
sudo npm install -g @angular/cli
echo

############################################################################
echo "${style_blue}${style_bold}Install newman/postman.${style_normal}"
sudo npm install -g newman postman
echo

############################################################################
if [ ! -e /snap ]; then
    echo "${style_blue}${style_bold}Make sure snapd supports --classic.${style_normal}"
    sudo ln -sf /var/lib/snapd/snap /snap
    echo "Done"
fi

echo "${style_blue}${style_bold}Make sure snapd is started/ready for operation.${style_normal}"
sudo systemctl start snapd.seeded.service
echo "Done"
echo

echo "${style_blue}${style_bold}Force snapd environment on first install of snapd.${style_normal}"
# This is what /etc/bashrc does
. /etc/profile.d/snapd.sh
echo "Done"
echo

echo "${style_blue}${style_bold}Check for snapd in PATH.${style_normal}"
SNAP_ENV_FOUND=0
echo "$PATH" | grep -q 'snapd' && SNAP_ENV_FOUND=1
if [ "$SNAP_ENV_FOUND" = "1" ]; then
    echo "OK"
else
    echo "${style_red}${style_bold}The environment for snap was not (yet) set."
    echo "Log off (or better restart) and run this script again to install snaps.${style_normal}"
    exit
fi
echo

echo "${style_blue}${style_bold}Refreshing snap.${style_normal}"
sudo snap refresh
echo

############################################################################
#echo "${style_blue}${style_bold}Install android sdkmanager and android SDK console tools.${style_normal}"
#sudo snap install androidsdk
#echo

echo "${style_blue}${style_bold}Install Android Studio (SDK is loaded on first start).${style_normal}"
sudo snap install android-studio --classic
echo

############################################################################
# https://docs.flutter.dev/get-started/install/linux
echo "${style_blue}${style_bold}Install flutter.${style_normal}"
sudo snap install flutter --classic
# Somthing in here installs ${HOME}/snap...
flutter sdk-path
flutter config --no-analytics
flutter --disable-telemetry
flutter config --android-sdk ~/Android/Sdk
flutter doctor
echo

echo "${style_blue}${style_bold}Install vscode flutter extension.${style_normal}"
code --install-extension Dart-Code.flutter
echo


############################################################################
echo
echo "${style_yellow}${style_bold}In case you are asked often for unlocking password:${style_normal}"
while true; do
    echo
    read -p "${style_yellow}Do you want to reset your keyring password (it is restored after next login)? (y/n) ${style_normal}" yn
    case $yn in
        [yY] ) echo "${style_blue}${style_bold}Deleting gnome-keyring password.${style_normal}"
            rm -f ~/.local/share/keyrings/login.keyring
            echo "Done"
            echo
            break;;
        [nN] ) echo "No action - keep gnome-keyring password";
            break;;
        * ) echo "${style_blue}${style_bold}Invalid response - enter 'y' or 'n'${style_normal}";;
    esac
done


############################################################################
echo
echo
echo "${style_yellow}${style_bold}Log off - HIGLY RECCOMENDED !!!!!${style_normal}"
xfce4-session-logout
echo

